Sascha Tetkov - Aufgabenblatt 9 	-	Mo 14-16
Aufgabe 1)

class Node implements Cloneable{
	public int value;
	public Node next;
	public Node(int val, Node next) { value = val; this.next = next; }
	
	public Object clone() throws CloneNotSupportedException 
	{
		Node res=(Node) super.clone();//value wird Kopiert, bei next wird die reference kopiert
		return res;
	}
}

public class SimpleList implements Cloneable{
	private Node head = null;
	public void add(int i) { head = new Node(i, head); }
	
	@Override
	public Object clone()
	{
		//Clone auf Liste Kopiert alle Knoten
		SimpleList list=null;
		try {
			list = (SimpleList) super.clone();
			Node ptr=head;
			if(ptr==null)
				return list;
			ptr=(Node) ptr.clone();
			list.head=ptr;
			while(ptr.next!=null)
			{
				ptr.next=(Node) ptr.next.clone();
				ptr=ptr.next;
			}
		} catch (CloneNotSupportedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return list;
	}
	
	public String toString()
	{
		String res="{";
		Node ptr=head;
		while(ptr!=null)
		{
			res+=" "+ptr.value;
			if(ptr.next!=null)
				res+=", ";
			ptr=ptr.next;
		}
		res+="}";
		return res;
	}
}


public class SimpleListTest {
	public static void main(String[] args) {
		SimpleList list1=new SimpleList();
		for(int i=0;i<10;i++)
			list1.add(i);
		SimpleList list2=(SimpleList) list1.clone();
		System.out.println("List 1: "+list1);
		System.out.println("List 2: "+list2);
		System.out.println("Adding element to List 1");
		list1.add(10);
		System.out.println("List 1: "+list1);
		System.out.println("List 2: "+list2);
	}
}

Aufgabe 2)

public class PrintFoundZeroAction implements ActionObject {

	private boolean isThereZero=false;
	
	public boolean isThereZero()
	{return isThereZero;}
	@Override
	public void action(GenericNode n) {
		if(n.data!=null)
			if(n.data.getClass()==Integer.class)
			{
				if(((Integer)n.data).intValue()==0)
					isThereZero=true;
			}
	}
}


public class SumPositiveIntegerAction implements ActionObject {

	private int sum=0;
	
	public int getSum()
	{return sum;}
	@Override
	public void action(GenericNode n) {
		if(n.data!=null)
			if(n.data.getClass()==Integer.class)
			{
				if(((Integer)n.data).intValue()>0)
					sum+=((Integer)n.data).intValue();
			}
	}
}


public class List {

	private GenericNode head=null;
	
	public void add(Object object)
	{
		head=new GenericNode(object,head);
	}

	public void applyActionToEachElement(ActionObject action)
	{
		GenericNode n=head;
		while(n!=null)
		{
			action.action(n);
			n=n.next;
		}
	}
}


public class ActionObjectTest {

	public static void showContainsZero(List list) {
		PrintFoundZeroAction action=new PrintFoundZeroAction();
		list.applyActionToEachElement(action);
		System.out.println("There is a zero in the list: "+action.isThereZero());
	}
	
	public static void showPosSum(List list) {
		SumPositiveIntegerAction action=new SumPositiveIntegerAction();
		list.applyActionToEachElement(action);
		System.out.println("The sum of all positive Integers is "+action.getSum());
	}
		
	public static void main(String[] args) {
		java.util.Random rand = new java.util.Random();
		int elems=rand.nextInt(120);
		List list=new List();
		for (int i=0;i<elems;i++)
			if(rand.nextInt(100)<50)
			{
				list.add(new Integer(rand.nextInt(10)-5));
			}
			else
			{
				switch(rand.nextInt(3))
				{
				case 0:
					list.add(new Object());
					break;
				case 1:
					list.add(new Boolean(false));
					break;
				case 2:
					list.add(null);
				}
			}
		showContainsZero(list);
		showPosSum(list);
	}

}